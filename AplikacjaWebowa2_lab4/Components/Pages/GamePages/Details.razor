@page "/games/details"
@inject AplikacjaWebowa2_lab4.Data.ApplicationDbContext DB
@using AplikacjaWebowa2_lab4.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization



<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Game</h4>
    <hr />
    @if (game is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-sm-6">
                <dl class="row">
                    <dt class="col-sm-4">Title</dt>
                    <dd class="col-sm-8">@game.Title</dd>
                    <dt class="col-sm-4">Genre</dt>
                    <dd class="col-sm-8">@game.Genre</dd>
                    <dt class="col-sm-4">ReleaseDate</dt>
                    <dd class="col-sm-8">@game.ReleaseDate</dd>
                    <dt class="col-sm-4">AverageRate</dt>
                    <dd class="col-sm-8">@game.AverageRate</dd>
                    <dt class="col-sm-4">Description</dt>
                    <dd class="col-sm-8">@game.Description</dd>
                </dl>
                <div>
                    <a href="@($"/games/edit?id={game.Id}")">Edit</a> |
                    <a href="@($"/games")">Back to List</a>
                </div>
                <div class="my-2"></div>
                <button class="btn btn-primary ml-2" @onclick="dodajOpinie">Add review</button>
                <div class="my-2"></div>
                @if (showElement)
                {
                    <div class="form-inline">
                        <div class="col-2">
                            <input type="number" class="form-control" @bind="reviewValue" />
                        </div>
                        <div class="my-2"></div>
                        <button class="btn btn-primary ml-2" @onclick="addReview">Save</button>
                        <button class="btn btn-secondary ml-2" @onclick="cancel">Cancel</button>
                    </div>
                }
            </div>
            <div class="col-sm-6">
                @if (!string.IsNullOrWhiteSpace(game.ImageUrl))
                {
                    <img src="@game.ImageUrl" alt="Game Image" class="img-fluid" />
                }
                else
                {
                    <p>No image available</p>
                }
            </div>
        </div>
    }
</div>

@code {
    bool showElement = false;
    float reviewValue;
    Game? game;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        game = await DB.Game.FirstOrDefaultAsync(m => m.Id == Id);

        if (game is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void dodajOpinie()
    {
        showElement = true;
        StateHasChanged();
    }

    private async Task addReview()
    {
        if (game != null)
        {
            if (game.Rate == null)
            {
                game.Rate = new List<float>();
            }
            game.AddRate(reviewValue);
            DB.Game.Update(game);
            await DB.SaveChangesAsync();
        }

        showElement = false;
    }

    private void cancel()
    {
        showElement = false;
        StateHasChanged();
    }
}
