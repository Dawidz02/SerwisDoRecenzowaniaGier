@page "/games/delete"
@inject AplikacjaWebowa2_lab4.Data.ApplicationDbContext DB
@using AplikacjaWebowa2_lab4.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Game</h4>
    <hr />
    @if (game is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@game.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Genre</dt>
            <dd class="col-sm-10">@game.Genre</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReleaseDate</dt>
            <dd class="col-sm-10">@game.ReleaseDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@game.Rate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@game.Description</dd>
        </dl>
        <EditForm method="post" Model="game" OnValidSubmit="DeleteGame" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(game is null)">Delete</button> |
            <a href="/games">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Game? game;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        game = await DB.Game.FirstOrDefaultAsync(m => m.Id == Id);

        if (game is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteGame()
    {
        DB.Game.Remove(game!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/games");
    }
}
